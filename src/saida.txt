// app/api/anomodelo/[refId]/[typeId]/[brandId]/[modelId]/route.js
export async function GET(params) {
  const baseUrl = process.env.BASE_URL
  const resource = 'ConsultarAnoModelo'
  const url = params.url
  const resources = url.split('/').filter(Boolean)
  const [codigoTabelaReferencia, codigoTipoVeiculo, codigoMarca, codigoModelo] =
    resources.slice(-4)

  const queryParams = new URLSearchParams()
  queryParams.append('codigoTabelaReferencia', codigoTabelaReferencia)
  queryParams.append('codigoTipoVeiculo', codigoTipoVeiculo)
  queryParams.append('codigoMarca', codigoMarca)
  queryParams.append('codigoModelo', codigoModelo)

  const urlToFetch = `${baseUrl}/${resource}?${queryParams.toString()}`

  const requestOptions = {
    method: 'POST',
    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
  }

  try {
    const apiResponse = await fetch(urlToFetch, requestOptions)
    if (!apiResponse.ok) {
      throw new Error('Network response was not ok')
    }

    const responseData = await apiResponse.json()
    const formattedResponse = responseData.map((item) => ({
      id: item.Value,
      year: item.Label.trim(),
    }))

    return Response.json(formattedResponse)
  } catch (error) {
    console.error(error)
    return Response.json({ error: 'Bad Request!' })
  }
}


// app/api/marcas/[refId]/[typeId]/route.js
export async function GET(requestParams) {
  const baseUrl = process.env.BASE_URL
  const resource = 'ConsultarMarcas'
  const requestUrl = requestParams.url
  const resources = requestUrl.split('/').filter(Boolean)

  const [codigoTabelaReferencia, codigoTipoVeiculo] = resources.slice(-2)

  const queryParams = new URLSearchParams()
  queryParams.append('codigoTabelaReferencia', codigoTabelaReferencia)
  queryParams.append('codigoTipoVeiculo', codigoTipoVeiculo)

  const urlToFetch = `${baseUrl}/${resource}?${queryParams.toString()}`

  const requestOptions = {
    method: 'POST',
    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
  }

  try {
    const apiResponse = await fetch(urlToFetch, requestOptions)
    const { ok, status, statusText } = apiResponse
    const data = await apiResponse.json()

    return Response.json({ ok, status, statusText, data })
  } catch (error) {
    console.error('Erro ao consultar API externa:', error)

    return Response.json({
      ok: false,
      status: 502,
      statusText: 'Erro ao consultar serviço externo',
      data: null
    })
  }
}


// app/api/modelos/[refId]/[typeId]/[brandId]/route.js
export async function GET(params) {
  const baseUrl = process.env.BASE_URL
  const resource = 'ConsultarModelos'
  const url = params.url
  const resources = url.split('/').filter(Boolean)
  const [codigoTabelaReferencia, codigoTipoVeiculo, codigoMarca] =
    resources.slice(-3)

  const queryParams = new URLSearchParams()
  queryParams.append('codigoTabelaReferencia', codigoTabelaReferencia)
  queryParams.append('codigoTipoVeiculo', codigoTipoVeiculo)
  queryParams.append('codigoMarca', codigoMarca)

  const urlToFetch = `${baseUrl}/${resource}?${queryParams.toString()}`

  const requestOptions = {
    method: 'POST',
    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
  }

  try {
    const apiResponse = await fetch(urlToFetch, requestOptions)
    if (!apiResponse.ok) {
      throw new Error('Network response was not ok')
    }

    const responseData = await apiResponse.json()
    const formattedResponse = responseData.Modelos.map((item) => ({
      id: item.Value,
      model: item.Label.trim(),
    }))

    return Response.json(formattedResponse)
  } catch (error) {
    console.error(error)
    return Response.json({ error: 'Bad Request!' })
  }
}


// app/api/vehicle/[refId]/[typeId]/[brandId]/[modelId]/[yearId]/route.js
export async function GET(params) {
  const baseUrl = process.env.BASE_URL
  const resource = 'ConsultarValorComTodosParametros'
  const url = params.url
  const resources = url.split('/').filter(Boolean)
  const [
    codigoTabelaReferencia,
    codigoTipoVeiculo,
    codigoMarca,
    codigoModelo,
    ano,
  ] = resources.slice(-5)

  const types = {
    1: 'carro',
    2: 'moto',
    3: 'caminhao',
  }

  const tipoVeiculo = types[codigoTipoVeiculo]
  const queryParams = new URLSearchParams()
  queryParams.append('codigoTabelaReferencia', codigoTabelaReferencia)
  queryParams.append('codigoTipoVeiculo', codigoTipoVeiculo)
  queryParams.append('codigoMarca', codigoMarca)
  queryParams.append('codigoModelo', codigoModelo)
  queryParams.append('ano', ano)
  queryParams.append('codigoTipoCombustivel', ano.slice(-1))
  queryParams.append('anoModelo', ano.slice(0, -2))
  queryParams.append('tipoVeiculo', tipoVeiculo)
  queryParams.append('tipoConsulta', 'tradicional')

  const urlToFetch = `${baseUrl}/${resource}?${queryParams.toString()}`

  const requestOptions = {
    method: 'POST',
    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
  }

  try {
    const apiResponse = await fetch(urlToFetch, requestOptions)
    if (!apiResponse.ok) {
      throw new Error('Network response was not ok')
    }

    const responseData = await apiResponse.json()
    const formattedResponse = {
      fipe: responseData.CodigoFipe,
      reference: responseData.MesReferencia.trim(),
      type: types[responseData.TipoVeiculo],
      brand: responseData.Marca,
      model: responseData.Modelo,
      year: responseData.AnoModelo,
      fuel: responseData.Combustivel,
      price: responseData.Valor,
      authentication: responseData.Autenticacao,
      timeStamp: responseData.DataConsulta,
    }

    return Response.json(formattedResponse)
  } catch (error) {
    console.error(error)
    return Response.json({ error: 'Bad Request!' })
  }
}


// app/api/referencia/route.js
export async function GET() {
  const requestOptions = {
    method: 'POST',
    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
    cache: 'no-store',
  }

  const baseUrl = process.env.BASE_URL
  const resource = 'ConsultarTabelaDeReferencia'
  const urlToFetch = `${baseUrl}/${resource}`

  try {
    const apiResponse = await fetch(urlToFetch, requestOptions)
    const { ok, status, statusText } = apiResponse
    const data = await apiResponse.json()

    return Response.json({ ok, status, statusText, data })
  } catch (error) {
    console.error('Erro ao consultar API externa:', error)

    return Response.json({
      ok: false,
      status: 502,
      statusText: 'Erro ao consultar serviço externo',
      data: null
    })
  }
}


// services/FetchData.js
export async function fetchAndCacheData(url) {

  // 1. Verifica se já existe no localStorage
  const cachedData = localStorage.getItem(url)
  if (cachedData) {
    return {
      ok: true,
      status: 200,
      statusText: 'OK (from cache)',
      data: JSON.parse(cachedData),
    }
  }

  // 2. Faz a requisição se não tiver no cache
  try {
    const response = await fetch(url)

    const { ok, status, statusText, } = response
    const responseApi = await response.json()

    if (ok) {
      // 3. Salva no localStorage apenas se ok === true
      localStorage.setItem(url, JSON.stringify(responseApi.data))
    }

    return { ok, status, statusText, data }
  } catch (error) {
    console.error('Erro ao consultar API externa:', error)

    return {
      ok: false,
      status: 502,
      statusText: 'Erro ao consultar serviço externo',
      data: null,
    }
  }
}


export const referenceUpdate = async () => {
  const getCurrentMonthAndYear = () => {
    const months = [
      'janeiro',
      'fevereiro',
      'março',
      'abril',
      'maio',
      'junho',
      'julho',
      'agosto',
      'setembro',
      'outubro',
      'novembro',
      'dezembro',
    ]

    const currentDate = new Date()
    const month = months[currentDate.getMonth()]
    const year = currentDate.getFullYear()

    return `${month}/${year}`
  }

  const cacheData = (data) => {
    if (!data.error) {
      localStorage.setItem('/api/referencia', JSON.stringify(data))
    }
  }

  const currentReference = getCurrentMonthAndYear()
  const referenceData = await fetchData('/api/referencia')

  if (!referenceData) return null

  const lastReference = referenceData[0]?.description

  if (currentReference !== lastReference) {
    try {
      const response = await fetch('/api/referencia')
      const newData = await response.json()

      if (!response.ok || newData.error) {
        throw new Error(newData.error || 'Network response was not ok')
      }

      cacheData(newData)
      console.log('Fetched updated reference data')
      return newData
    } catch (error) {
      console.error('Failed to fetch updated reference data:', error)
      return null
    }
  }

  return referenceData
}


// app/layout.jsx
import './globals.css'
import Header from './components/Header'
import Footer from './components/Footer'

import ClientProvider from '@/app/providers/ClientProvider'

export const metadata = {
  title: 'V FIPE',
  description: 'O jeito mais simples de obter dados da Tabela Fipe.',
}

export default function RootLayout({ children }) {
  return (
    <html lang="pt-br" className="h-full">
      <body className="bg-bk-3 text-wt-3 h-full flex flex-col">
        <ClientProvider>
          <Header className="shrink-0" />
          {children}
          <Footer />
        </ClientProvider>
      </body>
    </html>
  )
}


// app/page.jsx

import Hero from './components/Hero'
import Content from './components/Content'

const App = () => {

  return (
    <main className="container mx-auto px-4 py-4 flex-1 flex flex-col lg:flex-row gap-4 min-h-0">
      <Hero />
      <Content />
    </main>

  )
}

export default App


// app/components/Content.jsx
'use client'

import Skeleton from './Skeleton'
import ReferenceDrop from './ReferenceDrop'
import { useLoading } from '@/app/providers/LoadingProvider'
import { useEffect } from 'react'
import { useFipe } from '../../store/fipeStore'
import { fetchAndCacheData } from '../../services/FetchData'
import Breadcrumbs from './Breadcrumbs'
import TypeButtons from './TypeButtons'
import Result  from './Result'

const Content = () => {
  const { setreferenceTableList, setRefId, refId } = useFipe()

  useEffect(() => {


    const fetchReference = async () => {
      const response = await fetchAndCacheData('/api/referencia')
      const { ok, data, status, statusText } = response

      if (ok) {
        const formatedData = data.map(item => ({
          id: item.Codigo,
          description: item.Mes.trim()
        }));
        setreferenceTableList(formatedData)
        setRefId(formatedData[0].id)
        console.log(statusText)
      }

      return response
    }

    fetchReference()

  }, [])


  return (
    <main className="flex-1 min-h-0 overflow-hidden lg:h-full max-h-[40rem] bg-bk-2 rounded-xl shadow-lg border border-bk-3 flex flex-col">

      <div className="px-6 py-4 border-b border-bk-3 shrink-0">
        <Breadcrumbs />
      </div>

      <div className="flex flex-col lg:flex-row flex-1 min-h-0">

        <div className="lg:w-1/4 p-6 bg-bk-1 border-b lg:border-r border-bk-3 flex flex-col min-h-0 gap-6">
          <ReferenceDrop />
          <TypeButtons />
        </div>

        <div className="flex-1 p-6 bg-bk-1 lg:w-3/4 min-h-0 overflow-auto">
          <Result />
        </div>

      </div>
    </main>
  )
}

export default Content

// app/components/Brands.jsx
import { useState, useRef, useEffect } from 'react';
import Skeleton from './Skeleton';
import { useFipe } from '@/store/fipeStore';

const Brands = () => {
  const { brandList } = useFipe();
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredBrands, setFilteredBrands] = useState([]);
  const searchInputRef = useRef(null);

  // Monitora mudanças no brandList e reseta o filtro
  useEffect(() => {
    setSearchTerm(''); // Reseta a busca quando a lista muda
    searchInputRef.current?.focus(); // Mantém o foco no input
  }, [brandList]);

  // Filtra as marcas conforme o termo de busca
  useEffect(() => {
    if (!brandList) return;

    const searchWords = searchTerm.toLowerCase().trim().split(/\s+/);
    const filtered = brandList.filter(
      (brand) =>
        brand?.description &&
        searchWords.every((word) => brand.description.toLowerCase().includes(word))
    );
    setFilteredBrands(filtered);
  }, [searchTerm, brandList]);

  return (
    <div className="w-full flex flex-col gap-4">
      {/* Campo de busca - mantendo o mesmo estilo */}
      <input
        type="search"
        ref={searchInputRef}
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        placeholder="Pesquisar marcas..."
        className="w-full px-4 py-3 rounded-lg bg-bk-1 text-sm text-wt-1 placeholder-gr-1 shadow-md focus:outline-none focus:ring-2 focus:ring-or-2 border border-bk-3 transition-colors"
      />

      {/* Lista de marcas - mantendo o mesmo layout */}
      {!brandList ? (
        <Skeleton rows={5} /> // Mostra skeleton enquanto carrega
      ) : (
        <ul
          className="w-full max-h-80 overflow-y-auto bg-bk-1 rounded-lg shadow-md border border-bk-3 divide-y divide-bk-3 scrollbar-thin scrollbar-thumb-bk-3 scrollbar-track-bk-2"
          role="listbox"
        >
          {filteredBrands.length > 0 ? (
            filteredBrands.map((brand) => (
              <li
                key={brand.code}
                className="cursor-pointer px-4 py-3 text-sm text-wt-1 hover:bg-or-2/20 transition-colors group"
                role="option"
              >
                <span className="group-hover:text-or-1 transition-colors">
                  {brand.description}
                </span>
              </li>
            ))
          ) : (
            <li className="px-4 py-3 text-sm text-gr-1 italic">
              {searchTerm
                ? 'Nenhuma marca encontrada'
                : 'Nenhuma marca disponível'}
            </li>
          )}
        </ul>
      )}
    </div>
  );
};

export default Brands;

// app/components/Header.jsx
'use client'

import Image from 'next/image'
import LogoSvg from '@/public/img/logo.svg'
import { useLoading } from '@/app/providers/LoadingProvider'
import Skeleton from './Skeleton'
import { useFipe } from '../../store/fipeStore'


const Header = () => {

  const { referenceTableList } = useFipe()

  const { loading } = useLoading()
  const lastTable = referenceTableList[0]
  const description = lastTable?.description

  return (
    <header className="bg-bk-2 px-6 py-4 flex items-center justify-between flex-wrap gap-y-4 border-b border-bk-3 sticky top-0 z-50 shadow-md">
      {/* Logo e título - com hover effects */}
      <div className="flex items-center gap-0 group cursor-pointer">
        <div className="transition-transform duration-300 group-hover:scale-110">
          <Image
            alt="Logo da V FIPE"
            src={LogoSvg}
            priority
            className="drop-shadow-lg h-18 w-18 pb-3"
          />
        </div>
        <div>
          <h1 className="text-3xl sm:text-4xl font-bold text-wt-1 tracking-tight bg-gradient-to-r from-or-1 to-or-2 bg-clip-text">
            FIPE
          </h1>
          <p className="text-xs text-gr-1 opacity-90">Consulta de veículos</p>
        </div>
      </div>

      {/* Data de atualização - com melhor feedback visual */}
      <div className="flex items-center gap-3 text-sm sm:text-base">
        <span className="text-gr-1 transition-opacity duration-200">
          Atualizado em:
        </span>

        <div className="min-w-[120px]">
          {loading ? (
            <span className="h-2 w-[100px] inline-block">
              <Skeleton rows={1} className="h-full" />
            </span>
          ) : (
            <time
              className="text-or-1 font-medium whitespace-nowrap px-2 py-1 bg-bk-3/20 rounded-md border-bk-4 inline-block"
              dateTime={description}
              title="Data da última atualização"
            >
              {description}
            </time>
          )}
        </div>
      </div>
    </header>
  )
}

export default Header

// app/components/Models.jsx
import { useEffect, useState, useRef } from 'react'
import { useStep } from '@/app/providers/StepProvider'
import { fetchData } from '@/services/FetchData'
import Skeleton from '@/app/components/Skeleton'
import { useBreadcrumbs } from '@/app/providers/BreadcrumbsProvider'

const Models = () => {
  const { step, setStep } = useStep()
  const [models, setModels] = useState([])
  const [loading, setLoading] = useState(false)
  const [result, setResult] = useState([])
  const [searchTerm, setSearchTerm] = useState('')
  const searchInputRef = useRef(null)
  const { breadcrumbs, setBreadcrumbs } = useBreadcrumbs()

  const handleModels = async () => {
    setLoading(true)
    const { refId, typeId, brandId } = step
    const data = await fetchData(`/api/modelos/${refId}/${typeId}/${brandId}`)
    setModels(data)
    setLoading(false)
  }

  useEffect(() => {
    handleModels()
    setSearchTerm('')
    if (searchInputRef.current) {
      searchInputRef.current.focus()
    }
  }, [step])

  useEffect(() => {
    const searchWords = searchTerm.toLowerCase().trim().split(/\s+/)
    const filtered = models.filter((item) =>
      searchWords.every((word) => item.model.toLowerCase().includes(word))
    )
    setResult(filtered)
  }, [searchTerm, models])

  const handleSearchChange = (event) => {
    setSearchTerm(event.target.value)
  }

  const handleVehicle = (e) => {
    const newStep = { ...step }
    newStep.modelId = e.target.value
    setStep(newStep)
    const newCrumbs = [...breadcrumbs.slice(0, 3), e.target.innerText]
    setBreadcrumbs(newCrumbs)
  }

  return (
    <div className="w-full flex flex-col gap-4">
      <input
        type="search"
        ref={searchInputRef}
        value={searchTerm}
        onChange={handleSearchChange}
        placeholder="Pesquisar modelos..."
        className="w-full px-4 py-3 rounded-lg bg-bk-1 text-sm text-wt-1 placeholder-gr-1 shadow-md focus:outline-none focus:ring-2 focus:ring-or-2 border border-bk-3 transition-colors"
      />
      {loading ? (
        <Skeleton />
      ) : (
        <ul
          className="w-full max-h-80 overflow-y-auto bg-bk-1 rounded-lg shadow-md border border-bk-3 divide-y divide-bk-3 scrollbar-thin scrollbar-thumb-bk-3 scrollbar-track-bk-2"
          role="listbox"
        >
          {result.length > 0 ? (
            result.map((item) => (
              <li
                key={item.id}
                value={item.id}
                onClick={(e) => handleVehicle(e)}
                className="cursor-pointer px-4 py-3 text-sm text-wt-1 hover:bg-or-2/20 transition-colors group"
                role="option"
              >
                <span className="group-hover:text-or-1 transition-colors">
                  {item.model}
                </span>
              </li>
            ))
          ) : (
            <li className="px-4 py-3 text-sm text-gr-1 italic">
              Nenhum modelo encontrado
            </li>
          )}
        </ul>
      )}
    </div>
  )
}

export default Models

// app/components/Breadcrumbs.jsx
import { useFipe } from '../../store/fipeStore'
const Breadcrumbs = () => {

  const { refId, type } = useFipe()

  return (
    <div className="flex items-center space-x-2 bg-bk-1 p-3 rounded-lg shadow border border-bk-3 font-bold cursor-pointer">


      {
        !!refId &&
        <div className="flex items-center">
          <button className="ml-2 text-sm text-wt-3  cursor-pointer hover:text-or-2">
            tabela referência
          </button>
        </div>
      }

      {
        !!type &&
        <div className="flex items-center">
          <button className="ml-2 text-sm text-wt-3  cursor-pointer hover:text-or-2">
            {type.description}
          </button>
        </div>
      }


    </div>
  )
}

export default Breadcrumbs

// app/components/Result.jsx
import { useFipe } from '../../store/fipeStore'
import Brands from './Brands'

const Result = () => {

  const { brandList } = useFipe()

  return (
    <div className="">
      {
        brandList.length > 0 ?
        <Brands />:
        <></>
      }
    </div>
  )
}

export default Result


// app/components/Vehicles.jsx
import { useStep } from '@/app/providers/StepProvider'
import { fetchData } from '@/services/FetchData'
import { useEffect, useState } from 'react'
import Skeleton from './Skeleton'

const Vehicles = () => {
  const { step } = useStep()
  const [vehicles, setVehicles] = useState([])
  const [loading, setLoading] = useState(false)
  const [years, setYears] = useState([])

  const fetchAllVehicles = async (fetchedYears) => {
    const { refId, typeId, brandId, modelId } = step
    setLoading(true)

    try {
      const vehiclesData = await Promise.all(
        fetchedYears.map(async (year) => {
          const url = `/api/vehicle/${refId}/${typeId}/${brandId}/${modelId}/${year.id}`
          try {
            return await fetchData(url)
          } catch (error) {
            console.error(
              `Erro ao buscar veículo para o ano ${year.id}:`,
              error
            )
            return null
          }
        })
      )

      const validVehicles = vehiclesData.filter((vehicle) => vehicle !== null)
      setVehicles(validVehicles)
    } catch (error) {
      console.error('Erro ao buscar veículos:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleYears = async () => {
    const { refId, typeId, brandId, modelId } = step

    try {
      const fetchedYears = await fetchData(
        `/api/anomodelo/${refId}/${typeId}/${brandId}/${modelId}`
      )
      setYears(fetchedYears)
      fetchAllVehicles(fetchedYears)
    } catch (error) {
      console.error('Erro ao buscar anos:', error)
    }
  }

  useEffect(() => {
    if (step.refId && step.typeId && step.brandId && step.modelId) {
      handleYears()
    }
  }, [step])

  if (loading) return <Skeleton />

  return (
    <div className="w-full mt-4">
      <div className="overflow-x-auto max-h-[450px] overflow-y-auto rounded-lg shadow-md ring-1 ring-bk-3 scrollbar-thin scrollbar-thumb-bk-3 scrollbar-track-bk-2">
        <table className="min-w-full divide-y divide-bk-3 bg-bk-1 text-sm">
          <caption className="text-left px-6 py-3 text-sm font-medium text-or-1 border-b border-bk-3">
            {vehicles.length > 0
              ? `Código FIPE: ${vehicles[0].fipe}`
              : 'Veículos'}
          </caption>
          <thead className="bg-bk-2 sticky top-0 z-10">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-semibold text-wt-1 uppercase tracking-wider">
                Ano
              </th>
              <th className="px-6 py-3 text-left text-xs font-semibold text-wt-1 uppercase tracking-wider">
                Combustível
              </th>
              <th className="px-6 py-3 text-left text-xs font-semibold text-wt-1 uppercase tracking-wider">
                Valor
              </th>
            </tr>
          </thead>
          <tbody className="divide-y divide-bk-3">
            {vehicles.length > 0 ? (
              vehicles.map((vehicle) => (
                <tr
                  key={vehicle.authentication}
                  className="hover:bg-bk-2 transition-colors"
                >
                  <td className="px-6 py-4 text-wt-1">
                    {vehicle.year === '32000' ? 'Zero Km' : vehicle.year}
                  </td>
                  <td className="px-6 py-4 text-wt-1">{vehicle.fuel}</td>
                  <td className="px-6 py-4 text-or-1 font-medium">
                    {vehicle.price}
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td
                  colSpan="3"
                  className="px-6 py-4 text-center text-gr-1 italic"
                >
                  Nenhum veículo encontrado
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  )
}

export default Vehicles


// app/components/ReferenceDrop.jsx
import { useFipe } from '../../store/fipeStore'

const ReferenceDrop = () => {

  const { referenceTableList, setRefId } = useFipe();

  const handleChange = (e) => {
    const id = e.target.value
    setRefId(id)
  }

  return (
    <div className="w-full">
      <label
        htmlFor="referenceSelect"
        className="block mb-2 text-xs font-medium text-gr-2  uppercase"
      >
        tabela de referência
      </label>
      <select
        id="referenceSelect"
        onChange={handleChange}
        className="w-full h-12 px-4 py-2 rounded-lg bg-bk-1 text-wt-2 border border-bk-3 shadow-md focus:outline-none focus:ring-2 focus:ring-or-2 transition-colors"
      >
        {referenceTableList?.map((ref) => (
          <option key={ref.id} value={ref.id} className="bg-bk-1 text-wt-">
            {ref.description}
          </option>
        ))}
      </select>
    </div>
  )
}

export default ReferenceDrop


// app/components/Hero.jsx
import { FiTrendingUp, FiCheck } from 'react-icons/fi';

const Hero = () => {
  return (
    <aside className="lg:w-1/4 lg:min-w-[300px] lg:h-full max-h-[40rem]">
      <article className="h-full bg-bk-2 rounded-xl p-6 shadow-lg flex flex-col justify-evenly">
        <header>
          <h2 className="text-2xl font-bold text-or-2">Consulta FIPE Simplificada</h2>
        </header>

        <div className="my-4">
          <p className="text-gr-1">
            Obtenha valores oficiais de veículos diretamente da tabela FIPE de
            forma rápida e intuitiva.
          </p>
        </div>

        <section className="bg-bk-1 p-4 rounded-lg">
          <h3 className="font-semibold text-or-1 mb-2 flex items-center">
            <FiTrendingUp className="w-5 h-5 mr-2" />
            Destaques:
          </h3>
          <ul className="space-y-2 text-gr-1">
            <FeatureItem text="Dados direto da tabela FIPE oficial" />
            <FeatureItem text="Consultas rápidas e sem complicação" />
            <FeatureItem text="Filtro avançado para melhor localização" />
          </ul>
        </section>
      </article>
    </aside>
  );
};

const FeatureItem = ({ text }) => (
  <li className="flex items-start">
    <FiCheck className="w-5 h-5 text-of-green-2 mr-2 flex-shrink-0" />
    {text}
  </li>
);

export default Hero;

// app/components/Footer.jsx
const Footer = () => {
  return (
    <footer className="bg-bk-2 border-t border-bk-3 text-wt-2 text-sm px-4 py-4">
      <div className="max-w-6xl mx-auto flex flex-col items-center gap-2 text-center sm:flex-row sm:justify-center">
        <p className="text-xs text-gr-2">
          &copy; {new Date().getFullYear()}{' '}
          uma ferramenta {' '}
          <span className="font-semibold">autoflux</span>. Todos os direitos
          reservados.
        </p>
      </div>
    </footer>
  )
}

export default Footer

// app/components/TypeButtons.jsx
import { FaMotorcycle, FaCar, FaTruck } from 'react-icons/fa';
import { useFipe } from '../../store/fipeStore';
import Skeleton from './Skeleton';

import { fetchAndCacheData } from '../../services/FetchData'

const TypeButtons = () => {
  const { refId, setType, setBrandList, brandList } = useFipe();

  const handleClick = async (type) => {
    setType(type)
    const url = `/api/marcas/${refId}/${type.id}`
    const response = await fetchAndCacheData(url)
    const { ok, data, status, statusText } = response

    if (ok) {
      const formatData = data.map((brandList) => {
        return {id: brandList.Value, description: brandList.Label}
      })
      setBrandList(formatData)
      console.log(statusText)
      console.log(brandList)
    }
  };

  return (

    <div className="h-full flex flex-col gap-3">
      <h3 className="block mb-2 text-xs font-medium text-gr-2 uppercase">Tipo de veículo</h3>
      {!refId ?
        <Skeleton rows={3} /> :
        <>
          <TypeButton onClick={() => handleClick({ id: 1, description: "carro" })} icon={<FaCar />} label="Carro" />
          <TypeButton onClick={() => handleClick({ id: 2, description: "moto" })} icon={<FaMotorcycle />} label="Moto" />
          <TypeButton onClick={() => handleClick({ id: 3, description: "pesado" })} icon={<FaTruck />} label="Pesado" />
        </>}
    </div>

  );
};

const TypeButton = ({ icon, label, onClick }) => {
  return (
    <button
      onClick={onClick}
      className="flex items-center gap-3 px-4 py-2 rounded-md bg-bk-2 border border-bk-3 text-white hover:bg-or-3/30 hover:text-white transition-colors duration-200 cursor-pointer"
    >
      <span className="text-xl">{icon}</span>
      <span className="text-sm font-medium">{label}</span>
    </button>
  );
};

export default TypeButtons;


// app/components/Skeleton.jsx
const Skeleton = ({rows}) => {
  return (
    <div className="w-full flex flex-col gap-4 animate-pulse">
      <div className="h-12 rounded-lg bg-bk-3"></div>
      <div className="space-y-3">
        {[...Array(rows - 1)].map((_, index) => (
          <div key={index} className="h-12 rounded-lg bg-bk-3" />
        ))}
      </div>
    </div>
  )
}

export default Skeleton


// app/providers/ClientProvider.jsx
'use client'

import { LoadingProvider } from './LoadingProvider'
import { StepProvider } from './StepProvider'
import { BreadcrumbsProvider } from './BreadcrumbsProvider'

const ClientProvider = ({ children }) => {
  return (

    <LoadingProvider>
      <StepProvider>
        <BreadcrumbsProvider>
          {children}
        </BreadcrumbsProvider>
      </StepProvider>
    </LoadingProvider>
  )
}

export default ClientProvider


// app/providers/LoadingProvider.jsx
import { createContext, useContext, useState } from 'react'

export const LoadingContext = createContext({})

export const LoadingProvider = (props) => {
  const [loading, setLoading] = useState(false)

  return (
    <LoadingContext.Provider
      value={{
        loading,
        setLoading,
      }}
    >
      {props.children}
    </LoadingContext.Provider>
  )
}

export const useLoading = () => useContext(LoadingContext)

// app/providers/BreadcrumbsProvider.jsx
import { createContext, useContext, useState } from 'react'

const BreadcrumbsContext = createContext()

export const BreadcrumbsProvider = ({ children }) => {
  const [breadcrumbs, setBreadcrumbs] = useState([])

  return (
    <BreadcrumbsContext.Provider value={{ breadcrumbs, setBreadcrumbs }}>
      {children}
    </BreadcrumbsContext.Provider>
  )
}

export const useBreadcrumbs = () => useContext(BreadcrumbsContext)


// app/providers/StepProvider.jsx
import { createContext, useContext, useState } from 'react'

const StepContext = createContext()

const initial = {
  refId: '',
  typeId: '',
  brandId: '',
  modelId: '',
  yearId: '',
}

export const StepProvider = ({ children }) => {
  const [step, setStep] = useState(initial)

  return (
    <StepContext.Provider value={{ step, setStep }}>
      {children}
    </StepContext.Provider>
  )
}

export const useStep = () => useContext(StepContext)


// store/fipeStore.jsx
import { create } from 'zustand';

export const useFipe = create((set) => ({
  referenceTableList: [],
  setreferenceTableList: (reference) => set({ referenceTableList: reference }),
  
  refId: '',
  setRefId: (id) => set({ refId: id }),
  
  typeId: '',
  setTypeId: (id) => set({ typeId: id }),
  
  type: {},
  setType: (obj) => set({ type: obj }),
  
  brandList: {},
  setBrandList: (obj) => set({ brandList: obj }),

}));




// app/globals.css
@import 'tailwindcss';

@theme {
  /* Definindo variáveis CSS para as cores do tema */

  /* Whites */
  --color-wt-1: #ffffff;
  --color-wt-2: #f5f5f5;
  --color-wt-3: #e0e0e0;

  /* Greys */
  --color-gr-1: #bdbdbd;
  --color-gr-2: #757575;
  --color-gr-3: #333333;

  /* Oranges */
  --color-or-1: #ff9800;
  --color-or-2: #f57c00;
  --color-or-3: #ef6c00;

  /* Blacks */
  --color-bk-1: #212121;
  --color-bk-2: #1b1b1b;
  --color-bk-3: #0d0d0d;

  /* Scrollbar colors */
  --scrollbar-track-bg: #121212;
  --scrollbar-thumb-bg: #444444;
  --scrollbar-thumb-hover-bg: #666666;

  /* Office Colors */

  /* blue */
  --color-of-blue-1: #41a5ee;
  --color-of-blue-2: #2b7cd3;
  --color-of-blue-3: #185abd;
  --color-of-blue-4: #134391;

  /* green */
  --color-of-green-1: #47c481;
  --color-of-green-2: #39a063;
  --color-of-green-3: #2d7d42;
  --color-of-green-4: #3f7455;
}

html,
body,
#root {
  height: 100%;
  overflow: hidden;
  user-select: none;
}

.text-gradient-orange {
  background-image: linear-gradient(
    to right,
    var(--color-or-3),
    var(--color-or-1)
  );
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  color: transparent;
}

::-webkit-scrollbar {
  display: none;
}


