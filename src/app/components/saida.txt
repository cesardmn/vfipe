// Brands.jsx
import { useStep } from '@/app/providers/StepProvider'
import { fetchData } from '@/services/FetchData'
import { useEffect, useState, useRef } from 'react'
import Skeleton from './Skeleton'
import { useBreadcrumbs } from '@/app/providers/BreadcrumbsProvider'

const Brands = () => {
  const { step, setStep } = useStep()
  const [brands, setBrands] = useState([])
  const [loading, setLoading] = useState(false)
  const [result, setResult] = useState([])
  const [searchTerm, setSearchTerm] = useState('')
  const searchInputRef = useRef(null)
  const { breadcrumbs, setBreadcrumbs } = useBreadcrumbs()

  const handleBrands = async () => {
    setLoading(true)
    if (step.typeId !== '') {
      const data = await fetchData(`/api/marcas/${step.refId}/${step.typeId}`)
      setBrands(data)
    }
    setLoading(false)
  }

  useEffect(() => {
    handleBrands()
    setSearchTerm('')
    if (searchInputRef.current) {
      searchInputRef.current.focus()
    }
  }, [step])

  useEffect(() => {
    const searchWords = searchTerm.toLowerCase().trim().split(/\s+/)
    const filtered = brands.filter((brand) =>
      searchWords.every((word) => brand.brand.toLowerCase().includes(word))
    )
    setResult(filtered)
  }, [searchTerm, brands])

  const handleSearchChange = (event) => {
    setSearchTerm(event.target.value)
  }

  const handleModel = (e) => {
    const newStep = { ...step }
    newStep.brandId = e.target.value
    setStep(newStep)
    const newCrumbs = [...breadcrumbs.slice(0, 2), e.target.innerText]
    setBreadcrumbs(newCrumbs)
  }

  return (
    <div className="w-full flex flex-col gap-4">
      {loading ? (
        <Skeleton />
      ) : (
        <>
          <input
            type="search"
            ref={searchInputRef}
            value={searchTerm}
            onChange={handleSearchChange}
            placeholder="Pesquisar marcas..."
            className="w-full px-4 py-3 rounded-lg bg-bk-1 text-sm text-wt-1 placeholder-gr-1 shadow-md focus:outline-none focus:ring-2 focus:ring-or-2 border border-bk-3 transition-colors"
          />

          <ul
            className="w-full max-h-80 overflow-y-auto bg-bk-1 rounded-lg shadow-md border border-bk-3 divide-y divide-bk-3 scrollbar-thin scrollbar-thumb-bk-3 scrollbar-track-bk-2"
            role="listbox"
          >
            {result.length > 0 ? (
              result.map((item) => (
                <li
                  key={item.id}
                  value={item.id}
                  onClick={(e) => handleModel(e)}
                  className="cursor-pointer px-4 py-3 text-sm text-wt-1 hover:bg-or-2/20 transition-colors group"
                  role="option"
                >
                  <span className="group-hover:text-or-1 transition-colors">
                    {item.brand}
                  </span>
                </li>
              ))
            ) : (
              <li className="px-4 py-3 text-sm text-gr-1 italic">
                Nenhuma marca encontrada
              </li>
            )}
          </ul>
        </>
      )}
    </div>
  )
}

export default Brands

// Header.jsx
import Image from 'next/image'
import LogoSvg from '@/public/img/logo.svg'

const Header = () => {
  const date = new Date().toLocaleDateString('pt-BR', {
    month: 'long',
    year: 'numeric',
  }).replace(' de ', '/')

  return (
    <header className="bg-bk-2 px-6 py-4 flex items-center justify-between flex-wrap gap-y-4 border-b border-bk-3">
      <div className="flex items-center gap-4">
        <Image 
          alt="Logo da V FIPE" 
          src={LogoSvg} 
          width={50} 
          height={50} 
          priority 
          className="filter brightness-0 invert"
        />
        <div>
          <h1 className="text-3xl sm:text-4xl font-bold text-wt-1">FIPE</h1>
          <p className="text-xs text-gr-1">Consulta de ve√≠culos</p>
        </div>
      </div>

      <div className="flex items-center gap-2 text-sm sm:text-base text-wt-1 bg-bk-3 px-3 py-2 rounded-lg">
        <span className="opacity-75">Atualizado em:</span>
        <time className="text-or-1 font-medium" dateTime={new Date().toISOString()}>
          {date}
        </time>
      </div>
    </header>
  )
}

export default Header

// Models.jsx
import { useEffect, useState, useRef } from 'react'
import { useStep } from '@/app/providers/StepProvider'
import { fetchData } from '@/services/FetchData'
import Skeleton from '@/app/components/Skeleton'
import { useBreadcrumbs } from '@/app/providers/BreadcrumbsProvider'

const Models = () => {
  const { step, setStep } = useStep()
  const [models, setModels] = useState([])
  const [loading, setLoading] = useState(false)
  const [result, setResult] = useState([])
  const [searchTerm, setSearchTerm] = useState('')
  const searchInputRef = useRef(null)
  const { breadcrumbs, setBreadcrumbs } = useBreadcrumbs()

  const handleModels = async () => {
    setLoading(true)
    const { refId, typeId, brandId } = step
    const data = await fetchData(`/api/modelos/${refId}/${typeId}/${brandId}`)
    setModels(data)
    setLoading(false)
  }

  useEffect(() => {
    handleModels()
    setSearchTerm('')
    if (searchInputRef.current) {
      searchInputRef.current.focus()
    }
  }, [step])

  useEffect(() => {
    const searchWords = searchTerm.toLowerCase().trim().split(/\s+/)
    const filtered = models.filter((item) =>
      searchWords.every((word) => item.model.toLowerCase().includes(word))
    )
    setResult(filtered)
  }, [searchTerm, models])

  const handleSearchChange = (event) => {
    setSearchTerm(event.target.value)
  }

  const handleVehicle = (e) => {
    const newStep = { ...step }
    newStep.modelId = e.target.value
    setStep(newStep)
    const newCrumbs = [...breadcrumbs.slice(0, 3), e.target.innerText]
    setBreadcrumbs(newCrumbs)
  }

  return (
    <div className="w-full flex flex-col gap-4">
      <input
        type="search"
        ref={searchInputRef}
        value={searchTerm}
        onChange={handleSearchChange}
        placeholder="Pesquisar modelos..."
        className="w-full px-4 py-3 rounded-lg bg-bk-1 text-sm text-wt-1 placeholder-gr-1 shadow-md focus:outline-none focus:ring-2 focus:ring-or-2 border border-bk-3 transition-colors"
      />
      {loading ? (
        <Skeleton />
      ) : (
        <ul
          className="w-full max-h-80 overflow-y-auto bg-bk-1 rounded-lg shadow-md border border-bk-3 divide-y divide-bk-3 scrollbar-thin scrollbar-thumb-bk-3 scrollbar-track-bk-2"
          role="listbox"
        >
          {result.length > 0 ? (
            result.map((item) => (
              <li
                key={item.id}
                value={item.id}
                onClick={(e) => handleVehicle(e)}
                className="cursor-pointer px-4 py-3 text-sm text-wt-1 hover:bg-or-2/20 transition-colors group"
                role="option"
              >
                <span className="group-hover:text-or-1 transition-colors">
                  {item.model}
                </span>
              </li>
            ))
          ) : (
            <li className="px-4 py-3 text-sm text-gr-1 italic">
              Nenhum modelo encontrado
            </li>
          )}
        </ul>
      )}
    </div>
  )
}

export default Models

// Breadcrumbs.jsx
import { useBreadcrumbs } from '@/app/providers/BreadcrumbsProvider'
import { useStep } from '@/app/providers/StepProvider'
import { useEffect, useState } from 'react'

const Breadcrumbs = () => {
  const { breadcrumbs, setBreadcrumbs } = useBreadcrumbs()
  const { step, setStep } = useStep()
  const [crumbs, setCrumbs] = useState([])

  useEffect(() => {
    setCrumbs(breadcrumbs)
  }, [step, breadcrumbs])

  const handleClick = (e) => {
    const index = Number(e.target.id)

    if (index === 0) {
      const newStep = {
        refId: step.refId,
        typeId: '',
        brandId: '',
        modelId: '',
      }
      setStep(newStep)
    }

    if (index === 1) {
      const newStep = {
        refId: step.refId,
        typeId: step.typeId,
        brandId: '',
        modelId: '',
      }
      setStep(newStep)
      const newCrumbs = crumbs.slice(0, 2)
      setBreadcrumbs(newCrumbs)
    }

    if (index === 2) {
      const newStep = {
        refId: step.refId,
        typeId: step.typeId,
        brandId: step.brandId,
        modelId: '',
      }
      setStep(newStep)
      const newCrumbs = crumbs.slice(0, 3)
      setBreadcrumbs(newCrumbs)
    }
  }

  return (
    <div className="flex items-center space-x-2 bg-bk-1 p-3 rounded-lg shadow border border-bk-3">
      {crumbs.map((crumb, index) => (
        <div key={index} className="flex items-center">
          <button
            id={index}
            className={`text-sm ${index === crumbs.length - 1 
              ? 'text-or-1 font-semibold cursor-default' 
              : 'text-gr-1 hover:text-or-2 transition-colors'
            }`}
            onClick={handleClick}
          >
            {crumb}
          </button>
          {index < crumbs.length - 1 && (
            <span className="mx-2 text-gr-2">/</span>
          )}
        </div>
      ))}
    </div>
  )
}

export default Breadcrumbs

// Result.jsx
import { useStep } from '@/app/providers/StepProvider'
import Brands from '@/app/components/Brands'
import Models from '@/app/components/Models'
import Vehicles from '@/app/components/Vehicles'

const Result = () => {
  const { step } = useStep()

  return (
    <div className="">
      {step.refId !== '' && step.typeId !== '' && step.brandId === '' && (
        <Brands />
      )}
      {step.refId !== '' &&
        step.typeId !== '' &&
        step.brandId !== '' &&
        step.modelId === '' && <Models />}
      {step.refId !== '' &&
        step.typeId !== '' &&
        step.brandId !== '' &&
        step.modelId !== '' && <Vehicles />}
    </div>
  )
}

export default Result


// Vehicles.jsx
import { useStep } from '@/app/providers/StepProvider'
import { fetchData } from '@/services/FetchData'
import { useEffect, useState } from 'react'
import Skeleton from './Skeleton'

const Vehicles = () => {
  const { step } = useStep()
  const [vehicles, setVehicles] = useState([])
  const [loading, setLoading] = useState(false)
  const [years, setYears] = useState([])

  const fetchAllVehicles = async (fetchedYears) => {
    const { refId, typeId, brandId, modelId } = step
    setLoading(true)

    try {
      const vehiclesData = await Promise.all(
        fetchedYears.map(async (year) => {
          const url = `/api/vehicle/${refId}/${typeId}/${brandId}/${modelId}/${year.id}`
          try {
            return await fetchData(url)
          } catch (error) {
            console.error(`Erro ao buscar ve√≠culo para o ano ${year.id}:`, error)
            return null
          }
        })
      )

      const validVehicles = vehiclesData.filter((vehicle) => vehicle !== null)
      setVehicles(validVehicles)
    } catch (error) {
      console.error('Erro ao buscar ve√≠culos:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleYears = async () => {
    const { refId, typeId, brandId, modelId } = step

    try {
      const fetchedYears = await fetchData(
        `/api/anomodelo/${refId}/${typeId}/${brandId}/${modelId}`
      )
      setYears(fetchedYears)
      fetchAllVehicles(fetchedYears)
    } catch (error) {
      console.error('Erro ao buscar anos:', error)
    }
  }

  useEffect(() => {
    if (step.refId && step.typeId && step.brandId && step.modelId) {
      handleYears()
    }
  }, [step])

  if (loading) return <Skeleton />

  return (
    <div className="w-full mt-4">
      <div className="overflow-x-auto max-h-[450px] overflow-y-auto rounded-lg shadow-md ring-1 ring-bk-3 scrollbar-thin scrollbar-thumb-bk-3 scrollbar-track-bk-2">
        <table className="min-w-full divide-y divide-bk-3 bg-bk-1 text-sm">
          <caption className="text-left px-6 py-3 text-sm font-medium text-or-1 border-b border-bk-3">
            {vehicles.length > 0 ? `C√≥digo FIPE: ${vehicles[0].fipe}` : 'Ve√≠culos'}
          </caption>
          <thead className="bg-bk-2 sticky top-0 z-10">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-semibold text-wt-1 uppercase tracking-wider">
                Ano
              </th>
              <th className="px-6 py-3 text-left text-xs font-semibold text-wt-1 uppercase tracking-wider">
                Combust√≠vel
              </th>
              <th className="px-6 py-3 text-left text-xs font-semibold text-wt-1 uppercase tracking-wider">
                Valor
              </th>
            </tr>
          </thead>
          <tbody className="divide-y divide-bk-3">
            {vehicles.length > 0 ? (
              vehicles.map((vehicle) => (
                <tr key={vehicle.authentication} className="hover:bg-bk-2 transition-colors">
                  <td className="px-6 py-4 text-wt-1">
                    {vehicle.year === '32000' ? 'Zero Km' : vehicle.year}
                  </td>
                  <td className="px-6 py-4 text-wt-1">{vehicle.fuel}</td>
                  <td className="px-6 py-4 text-or-1 font-medium">{vehicle.price}</td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan="3" className="px-6 py-4 text-center text-gr-1 italic">
                  Nenhum ve√≠culo encontrado
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  )
}

export default Vehicles

// ReferenceDrop.jsx
import React, { useEffect, useState } from 'react'
import { useStep } from '@/app/providers/StepProvider'
import { useBreadcrumbs } from '@/app/providers/BreadcrumbsProvider'
import { referenceUpdate } from '@/services/FetchData'
import Skeleton from './Skeleton'

const ReferenceDrop = () => {
  const { step, setStep } = useStep()
  const { setBreadcrumbs } = useBreadcrumbs()
  const [referenceList, setReferenceList] = useState([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    const fetchReferences = async () => {
      setBreadcrumbs(['Tabela Refer√™ncia'])

      try {
        const data = await referenceUpdate()
        setReferenceList(data || [])
        if (data?.length > 0) {
          setStep(prev => ({ ...prev, refId: data[0].id }))
        }
      } catch (err) {
        console.error('Erro ao buscar refer√™ncias:', err)
      } finally {
        setLoading(false)
      }
    }

    fetchReferences()
  }, [])

  const handleChange = (e) => {
    const selectedRefId = e.target.value
    setStep(prev => ({
      ...prev,
      refId: selectedRefId,
      typeId: '',
      brandId: '',
    }))
    setBreadcrumbs(['Tabela Refer√™ncia'])
  }

  if (loading) {
    return (
      <div className="w-full">
        <Skeleton />
      </div>
    )
  }

  return (
    <div className="w-full">
      <label
        htmlFor="referenceSelect"
        className="block mb-2 text-sm font-medium text-wt-1"
      >
        Selecione a tabela de refer√™ncia
      </label>
      <select
        id="referenceSelect"
        onChange={handleChange}
        disabled={loading}
        className="w-full h-12 px-4 py-2 rounded-lg bg-bk-1 text-wt-1 border border-bk-3 shadow-md focus:outline-none focus:ring-2 focus:ring-or-2 transition-colors"
      >
        {referenceList.map((ref) => (
          <option key={ref.id} value={ref.id} className="bg-bk-1 text-wt-1">
            {ref.description}
          </option>
        ))}
      </select>
    </div>
  )
}

export default ReferenceDrop

// Hero.jsx
const Hero = () => {
  return (
    <div className="lg:w-1/4 bg-bk-2 rounded-xl p-6 shadow-lg">
      <div className="space-y-6 sticky top-4">
        <h2 className="text-2xl font-bold text-or-2">Consulta FIPE Simplificada</h2>
        <p className="text-gr-1">
          Obtenha valores oficiais de ve√≠culos diretamente da tabela FIPE de forma r√°pida e intuitiva.
        </p>

        <div className="bg-bk-1 p-4 rounded-lg">
          <h3 className="font-semibold text-or-1 mb-2 flex items-center">
            <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2"
                d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
            </svg>
            Destaques:
          </h3>
          <ul className="space-y-2 text-gr-1">
            <li className="flex items-start">
              <svg className="w-5 h-5 text-of-green-2 mr-2 flex-shrink-0" fill="none" stroke="currentColor"
                viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
              </svg>
              Dados direto da tabela FIPE oficial
            </li>
            <li className="flex items-start">
              <svg className="w-5 h-5 text-of-green-2 mr-2 flex-shrink-0" fill="none" stroke="currentColor"
                viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
              </svg>
              Consultas r√°pidas e sem complica√ß√£o
            </li>
            <li className="flex items-start">
              <svg className="w-5 h-5 text-of-green-2 mr-2 flex-shrink-0" fill="none" stroke="currentColor"
                viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
              </svg>
              Filtro avan√ßado para melhor localiza√ß√£o das caracter√≠sticas
            </li>
          </ul>
        </div>
      </div>
    </div>
  )
}

export default Hero

// TypeButtons.jsx
import { useStep } from '@/app/providers/StepProvider'
import { useBreadcrumbs } from '@/app/providers/BreadcrumbsProvider'
import { FaMotorcycle, FaCar, FaTruck } from 'react-icons/fa'

const TypeButtons = () => {
  const { step, setStep } = useStep()
  const { breadcrumbs, setBreadcrumbs } = useBreadcrumbs()
  const sizeIcon = 24
  const types = {
    1: { label: 'Carros', icon: <FaCar size={sizeIcon} /> },
    2: { label: 'Motos', icon: <FaMotorcycle size={sizeIcon} /> },
    3: { label: 'Caminh√µes', icon: <FaTruck size={sizeIcon} /> },
  }

  const handleType = (id) => {
    setStep(prev => ({
      ...prev,
      typeId: id,
      brandId: '',
      modelId: '',
    }))
    setBreadcrumbs([breadcrumbs[0], types[id].label])
  }

  if (!step.refId) return null

  return (
    <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 w-full">
      {Object.entries(types).map(([id, { label, icon }]) => (
        <button
          key={id}
          onClick={() => handleType(Number(id))}
          className={`flex flex-col items-center justify-center gap-2 p-4 rounded-xl shadow-md transition-all border-2 ${
            step.typeId === Number(id)
              ? 'bg-or-2/10 border-or-2 text-or-1'
              : 'bg-bk-1 border-bk-3 text-wt-1 hover:bg-bk-2 hover:border-or-1'
          }`}
        >
          <div className={`${
            step.typeId === Number(id) ? 'text-or-1' : 'text-gr-1'
          } transition-colors`}>
            {icon}
          </div>
          <span className="text-sm font-medium">{label}</span>
        </button>
      ))}
    </div>
  )
}

export default TypeButtons

// Skeleton.jsx
const Skeleton = () => {
  return (
    <div className="w-full flex flex-col gap-4 animate-pulse">
      <div className="h-12 rounded-lg bg-bk-3"></div>
      <div className="space-y-3">
        {[...Array(5)].map((_, index) => (
          <div
            key={index}
            className="h-12 rounded-lg bg-bk-3"
          />
        ))}
      </div>
    </div>
  )
}

export default Skeleton

import './globals.css'
import Header from './components/Header'
import Hero from './components/Hero'

import ClientProvider from '@/app/providers/ClientProvider'
export const metadata = {
  title: 'V FIPE',
  description: 'O jeito mais simples de obter dados da Tabela Fipe.',
}

export default function RootLayout({ children }) {
  return (
    <html lang="pt-br">
      <body className='bg-bk-3 text-wt-3' >
        <Header />
        <main className='container mx-auto px-4 py-8 flex gap-4 '>
          <Hero />
          <ClientProvider>{children}</ClientProvider>
        </main>
      </body>
    </html>
  )
}

import './globals.css'
import Header from './components/Header'
import Hero from './components/Hero'

import ClientProvider from '@/app/providers/ClientProvider'
export const metadata = {
  title: 'V FIPE',
  description: 'O jeito mais simples de obter dados da Tabela Fipe.',
}

export default function RootLayout({ children }) {
  return (
    <html lang="pt-br">
      <body className='bg-bk-3 text-wt-3' >
        <Header />
        <main className='container mx-auto px-4 py-8 flex gap-4 '>
          <Hero />
          <ClientProvider>{children}</ClientProvider>
        </main>
      </body>
    </html>
  )
}
